{"version":3,"sources":["cn.svg","us.svg","App.tsx","resume_cn.ts","reportWebVitals.ts","index.tsx"],"names":["App","useState","code","setCode","darkMode","setDarkMode","myEditor","useRef","width","setWidth","className","split","onChange","size","newSize","console","log","current","layout","href","target","rel","style","height","src","svg_cn","alt","svg_us","onClick","value","language","theme","options","selectOnLineNumbers","newValue","editorDidMount","editor","focus","render","document","getElementById","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"kRAAe,G,OAAA,IAA0B,gCCA1B,MAA0B,+BCWzC,SAASA,IAAO,IAAD,EAEWC,mBCbX,kPDWA,mBAENC,EAFM,KAEAC,EAFA,OAImBF,oBAAS,GAJ5B,mBAING,EAJM,KAIIC,EAJJ,KAMPC,EAAWC,mBANJ,EAQaN,mBAAS,QARtB,mBAQNO,EARM,KAQCC,EARD,KAwBb,OACE,qBAAKC,UAAU,oBAAf,SACE,eAAC,IAAD,CAAWC,MAAM,WAAWC,SATV,SAACC,GAAmB,IAAD,EACjCC,EAAUD,EAChBE,QAAQC,IAAe,IAAXF,EAAQ,GAAU,MAC9BL,EAAoB,IAAXK,EAAQ,GAAU,MAC3B,UAAAR,EAASW,eAAT,SAAkBC,UAKhB,UACE,sBAAKR,UAAU,4BAAf,UACE,qBAAKA,UAAU,6DAAf,SACE,mBAAGA,UAAU,qBAAqBS,KAAK,wBAAwBC,OAAO,SAASC,IAAI,aAAnF,2BAEF,qBAAKX,UAAU,sCAAsCY,MAAO,CAAEC,OAAQ,qBAAtE,SACE,cAAC,IAAD,CAAeb,UAAU,mBAAzB,SAA6CR,SAGjD,sBAAKQ,UAAU,gBAAf,UACE,sBAAKA,UAAU,8DAAf,UACE,qBAAIA,UAAU,sCAAd,UACE,qBAAIA,UAAU,oFAAd,UACE,qBAAKA,UAAU,MAAMc,IAAKC,EAAQC,IAAI,UACtC,sBAAMhB,UAAU,eAAhB,6BAEF,qBAAIA,UAAU,yEAAd,UACE,qBAAKA,UAAU,MAAMc,IAAKG,EAAQD,IAAI,OACtC,sBAAMhB,UAAU,eAAhB,2BAGJ,qBAAIA,UAAU,4BAAd,UACE,oBAAIA,UAAU,GAAd,8BACA,oBAAIA,UAAU,GAAd,4CACA,oBAAIA,UAAU,mCAAmCkB,QAAS,kBAAMvB,GAAY,SAAAwB,GAAK,OAAKA,MAAtF,SACE,+BAAQzB,EAAW,eAAO,mBAJ9B,UAQF,cAAC,IAAD,CACEI,MAAOA,EACPe,OAAQ,OACRO,SAAS,WACTC,MAAO3B,EAAW,UAAY,KAC9ByB,MAAO3B,EACP8B,QAAS,CAAEC,qBAAqB,GAChCrB,SA/Ca,SAACsB,GAAD,OAAmB/B,EAAQ+B,IAgDxCC,eArDa,SAACC,GACtB9B,EAASW,QAAUmB,EACnB9B,EAASW,QAAQoB,mBA2DrBC,iBACE,cAACtC,EAAD,IACAuC,SAASC,eAAe,SAGXxC,QEzEAyC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASC,eAAe,SAM1BC,M","file":"static/js/main.1063a088.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cn.7977e12a.svg\";","export default __webpack_public_path__ + \"static/media/us.3cc0d38b.svg\";","import React, { useState, useRef } from 'react';\nimport { render } from 'react-dom';\nimport MonacoEditor from 'react-monaco-editor';\nimport SplitPane from 'react-split-pane';\nimport ReactMarkdown from 'react-markdown';\nimport * as monaco from \"monaco-editor/esm/vs/editor/editor.api\";\nimport './A4.css';\nimport resume_cn from './resume_cn';\nimport svg_cn from './cn.svg';\nimport svg_us from './us.svg'\n\nfunction App() {\n\n  const [code, setCode] = useState(resume_cn);\n  \n  const [darkMode, setDarkMode] = useState(true);\n\n  const myEditor = useRef<monaco.editor.IStandaloneCodeEditor>();\n\n  const [width, setWidth] = useState('100%');\n\n  const editorDidMount = (editor: monaco.editor.IStandaloneCodeEditor): void => {\n    myEditor.current = editor;\n    myEditor.current.focus();\n  }\n\n  const onMonacoChange = (newValue: any) => setCode(newValue);\n\n  const onSplitChange = (size: unknown) => {\n    const newSize = size as number[];\n    console.log(newSize[1]*0.01 + 'px');\n    setWidth(newSize[1]*0.01 + 'px');\n    myEditor.current?.layout();\n  };\n\n  return (\n    <div className=\"w-screen h-screen\">\n      <SplitPane split=\"vertical\" onChange={onSplitChange} >\n        <div className=\"w-full h-full bg-gray-100\">\n          <div className=\"w-full bg-black h-12 flex justify-center items-center px-4\">\n            <a className=\"text-white text-lg\" href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noreferrer\">Geek Resume</a>\n          </div>\n          <div className=\"flex justify-center overflow-scroll\" style={{ height: 'calc(100% - 48px)' }}>\n            <ReactMarkdown className=\"A4 markdown-body\">{code}</ReactMarkdown>\n          </div>\n        </div>\n        <div className=\"w-full h-full\">\n          <div className=\"w-full bg-black h-12 flex justify-between items-center px-4\">\n            <ul className=\"flex items-center text-white h-full\">\n              <li className=\"px-4 h-full flex items-center cursor-pointer border-0 border-b-2 border-green-300\">\n                <img className=\"w-6\" src={svg_cn} alt=\"zh-cn\" />\n                <span className=\"pl-4 text-sm\">ä¸­æ–‡</span>\n              </li>\n              <li className=\"px-4 h-full flex items-center cursor-pointer border-0 border-green-300\">\n                <img className=\"w-6\" src={svg_us} alt=\"us\" />\n                <span className=\"pl-4 text-sm\">English</span>\n              </li>\n            </ul>\n            <ul className=\"w-64 flex justify-between\">\n              <li className=\"\">linkin / Boss / </li>\n              <li className=\"\">Export as PDF / PNG / Markdown</li>\n              <li className=\"cursor-pointer flex items-center\" onClick={() => setDarkMode(value => !value)}>\n                <span>{ darkMode ? 'ðŸŒ•' : 'ðŸŒ™' }</span>\n              </li>e\n            </ul>\n          </div>\n          <MonacoEditor\n            width={width}\n            height={'100%'}\n            language=\"markdown\"\n            theme={darkMode ? \"vs-dark\" : \"vs\"}\n            value={code}\n            options={{ selectOnLineNumbers: true }}\n            onChange={onMonacoChange}\n            editorDidMount={editorDidMount}\n          />\n        </div>\n      </SplitPane>\n    </div>\n  );\n}\n\nrender(\n  <App />,\n  document.getElementById('root')\n);\n\nexport default App;\n","const RESUME_CN = `\n# Hello, *world*!\n\n- ddd\n- cfvvv\n    - ddf\n    - fdsfsfdsfd\n        - ccddd\n\n1. ddd\n2. dddd\n\n> cddsdsds\n> \n> dsdsdsdsdsdsds\n> dsdsdsdsdsdsds\n> > dsdsdsdsdsds\n\n\n| sss | fvvcvc |\n| ---- | ---- |\n| xsdsds | kcldfkld |\n`\n\nexport default RESUME_CN","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}