{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","code","setCode","darkMode","setDarkMode","ref","useRef","useSize","height","className","split","allowResize","href","target","rel","onClick","value","size","width","language","theme","options","selectOnLineNumbers","onChange","newValue","editorDidMount","editor","monaco","console","log","focus","render","document","getElementById","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"mSAQA,SAASA,IAAO,IAAD,EACWC,mBAAS,qBADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,oBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAIPC,EAAMC,iBAAO,MAJN,EAMUC,YAAQF,GAAvBG,cANK,MAMI,EANJ,EAmBb,OACE,qBAAKH,IAAKA,EAAKI,UAAU,oBAAzB,SACE,eAAC,IAAD,CAAWC,MAAM,aAAaC,aAAa,EAA3C,UACE,sBAAKF,UAAU,8DAAf,UACE,mBAAGA,UAAU,qBAAqBG,KAAK,wBAAwBC,OAAO,SAASC,IAAI,aAAnF,yBACA,qBAAIL,UAAU,4BAAd,UACE,oBAAIA,UAAU,GAAd,8BACA,oBAAIA,UAAU,GAAd,4CACA,oBAAIA,UAAU,iBAAiBM,QAAS,kBAAMX,GAAY,SAAAY,GAAK,OAAKA,MAApE,SAA8Eb,EAAW,eAAO,uBAGpG,eAAC,IAAD,CAAWO,MAAM,WAAWO,KAAMT,EAAS,GAAS,KAApD,UACE,qBAAKC,UAAU,sFAAf,SACE,cAAC,IAAD,CAAeA,UAAU,qBAAzB,SAA+CR,MAEjD,qBAAKQ,UAAU,gBAAf,SACE,cAAC,IAAD,CACES,MAAM,OACNV,OAAQA,EAAS,GAAS,KAC1BW,SAAS,WACTC,MAAOjB,EAAW,UAAY,KAC9Ba,MAAOf,EACPoB,QA1BI,CACdC,qBAAqB,GA0BXC,SA7BK,SAACC,GAAD,OAAmBtB,EAAQsB,IA8BhCC,eAnCW,SAACC,EAAaC,GACnCC,QAAQC,IAAI,iBAAkBH,GAC9BA,EAAOI,qBA0CXC,iBACE,cAAChC,EAAD,IACAiC,SAASC,eAAe,SAGXlC,QCnDAmC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASC,eAAe,SAM1BC,M","file":"static/js/main.76973579.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { render } from 'react-dom';\nimport { useSize } from \"ahooks\";\nimport MonacoEditor from 'react-monaco-editor';\nimport SplitPane from 'react-split-pane';\nimport ReactMarkdown from 'react-markdown';\nimport './A4.css';\n\nfunction App() {\n  const [code, setCode] = useState(`# Hello, *world*!`);\n  const [darkMode, setDarkMode] = useState(true);\n\n  const ref = useRef(null);\n\n  const { height = 0 } = useSize(ref);\n\n  const editorDidMount = (editor: any, monaco: any): void => {\n    console.log('editorDidMount', editor);\n    editor.focus();\n  }\n\n  const onChange = (newValue: any) => setCode(newValue);\n\n  const options = {\n    selectOnLineNumbers: true\n  };\n\n  return (\n    <div ref={ref} className=\"w-screen h-screen\">\n      <SplitPane split=\"horizontal\" allowResize={false}>\n        <div className=\"w-full bg-black h-12 flex justify-between items-center px-4\">\n          <a className=\"text-white text-lg\" href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noreferrer\">Geek Resume</a>\n          <ul className=\"w-64 flex justify-between\">\n            <li className=\"\">linkin / Boss / </li>\n            <li className=\"\">Export as PDF / PNG / Markdown</li>\n            <li className=\"cursor-pointer\" onClick={() => setDarkMode(value => !value)}>{ darkMode ? 'ðŸŒ•' : 'ðŸŒ™' }</li>\n          </ul>\n        </div>\n        <SplitPane split=\"vertical\" size={height - 3.5*14 + 'px'} >\n          <div className=\"w-full h-full flex flex-col justify-center items-center bg-gray-100 overflow-scroll\">\n            <ReactMarkdown className=\"page markdown-body\">{code}</ReactMarkdown>\n          </div>\n          <div className=\"w-full h-full\">\n            <MonacoEditor\n              width=\"100%\"\n              height={height - 3.5*14 + 'px'}\n              language=\"markdown\"\n              theme={darkMode ? \"vs-dark\" : \"vs\"}\n              value={code}\n              options={options}\n              onChange={onChange}\n              editorDidMount={editorDidMount}\n            />\n          </div>\n        </SplitPane>\n      </SplitPane>\n    </div>\n  );\n}\n\nrender(\n  <App />,\n  document.getElementById('root')\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}